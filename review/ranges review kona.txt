Permutable:
What if the user deletes swap?

TotallyOrdered concept name:
See library issue 2547.

Re: note about less<>, add reference to less<>. Find a way to not repeat the note 3 times.

MergeMovable -> MoveMergeable

Sortable:
s/permute sequences of iterators into an ordered sequences/permutes sequences into ordered sequences/.

SizedIteratorRange
put a "then" after the non-code-font comma.

Iterator synopsis
=================

Nuke CamelCase for associated types; use _t.

"classB"

STL: No range-and-a-half algorithm forms! (Do we still need WeakInputIterator?)
STL: Would like to see the output range safety issue solved for the International Standard. OK for the TS?

unreachable:
-----------
Add relational operators for unreachable(??)

Range access:
------------
Move "exposition only" after _Auto=true;
Add a note about the use of _Auto
Preemptively add _Auto to size()

Range primitives
----------------
Don't use terse introducer syntax

Iterator associated types
-------------------------

p1/ Don't use the concept names as type names here.

DifferenceType<T>:
Strike difference_type<nullptr_t>
Strike volatile specializations
Enums?

IteratorCategory, (8.1),(8.2), etc., needs "otherwise" for all bullets but the first.
Use "is_base_of" instead of "is the same as or derives from".(8.6) needs a period.

p10/ "this standard" -> "this document" globally


24.7.2/p2.1 "has a nested type value_type" -> "if Out::value_type is valid and denotes a type" (cite 14.8.2)

(7.1)and sibling bullets need "otherwise" 

24.7.3 Strike struct iterator

24.7.4 Dont' use "Iterator" as the type name.
reorder tags to make output first.
don't use ": public" where it's no needed.

In BinaryTreeIterator, strike note about iterator<> inheritance.

Strike p4,p5,p6

Finished 24.7.4, stopping for the day.

24.7.5 Iterator operations
---------------------
/p1 mention next and prev in addition to advance and distance?
- "for input, forward,..." add weak (unless we're dropping weak).

/p4 Requires ..., or i shall be reachable from bound and is_assignable<I&,S&&>::value is true.
Add effects clause: `i = std::move(bound)`
/p6 If S is assignable to I, (is_assignable<I&,S&&>), this function is constant time.
/p7 "shall dispatch to" -> "is equivalent to" globally
/p5,6,7 should be rearranged and ordered: 6,7,5.
/p(10.1), true should be monospace.

/p12 where did the newline after Effects: come from?
/p12,p13 What's going on with the markup?

24.8.1 Reverse iterators
------------------------

Namespaces:
namespace std {
 namespace experimental {
   namespace ranges {
     inline namespace v1 {}
   }
  }
}

#include <experimental/ranges/utility>

Nuke rel_ops

24.8.1.1
ConvertibleTo and value category? Make sure the ConvertibleTo concept enforces consistency across value category.
Nuke "// explicit"
s/protected/private/; add "// exposition only"
add ";" after operator[]
See LWG#2347, #1051, but leave the return type as unspecified

reverse_iterator comparisons, needs requirement that both iterators are from the same range.

in member function definitiions, change "typename reverse_iterator<...>::difference_type" etc, to difference_type, and others.

Definition of relational operators and op+ and op-, change "Returns:" to "Effects: equivalent to"


24.8.2 insert iterators
----------------------
Make the default constructor constexpr
s/protected/private/, add "// exposition only"
Make op*, op++, op= const.
Replace "Effects:" with "Effects: equivalent to" to pick up requires current != nullptr.


24.8.2.6.1 insert_iterator
----
/p2 Requires: i is an iterator into x

move_iterator
------------
demote move_iterator's iterator category. (YAY!)
See LWG#2106, about move iterator's reference type; affects the class-level constraint.
Hypenate "value initializing"
base() should return I instead of iterator_type
strike move_iterator::op->. Add note that -> is not provided and why.
"Effects: equivalent to" on all member definitions.

Change RandomAccessIterator concept to require op[] has same type as op*. Change all the "unspecified operator[]" to "reference operator[]"

change x.base() to x.current everywhere.

Stopped at 24.8.4 for break.

24.8.4.1 Class template common_iterator
-----------------
Pull out ad hoc constraint on op- and give it a name

/p2 "It is unspecified ..." make a separate Remark; globally in this section

24.8.4.2.2
/p3 "Destroys" instead of "Runs the destructor(s)"

Should we have make_common_iterator?

24.8.6.1 counted_iterator
-----------------------
using reference = ...; <-- doesn't work if I is an OutputIterator

s/protected/private/, add exposition only

/p8 op< Add note about why the argument order is reversed (because count counts down).

24.8.6.2.14 op- use common_type_t<DifferenceType....> for the return type.

24.8.7.1 Class template dangling
-----------------------------

24.8.8 Unreachable sentinel
-------------------------
24.8.8.1 Class unreachable sentinel <-- nuke sentinel

"potentially make the call to find more efficient" -> makes

stream iterators
------
add comparasons with default_sentinel


24.9.2 Class template ostream_iterator
-------------------------------------
s/ostream_iterator<T,charT,traits>/ostream_iterator/
Italics "out_stream" and "delim" should be monotype
Add noexcept to constructors
24.9.2.2 ostream_iterator::op=, nuke Requires, change "Effects" to "Effects: Equivalent to"
Change 0 and null to nullptr
remove para 4 (return *this)



http://wiki.edg.com/twiki/bin/view/Wg21kona2015/LWGMondayLateAfternoon
http://wiki.edg.com/twiki/bin/view/Wg21kona2015/LWGTuesdayEarlyAfternoon
http://wiki.edg.com/twiki/bin/view/Wg21kona2015/LWGWednesdayEarlyMorning


