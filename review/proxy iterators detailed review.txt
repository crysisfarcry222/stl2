CommonReference
-----
s/or bound//
Change explicitly convertible to "models ConvertibleTo"

Handle function references, don't lvalue-ify objects
  - "objects of type"-> "variables of type" ??
  - Let t1 be declval<T>() ??

STL: equal -> equivalant to
JW: Prefer equal

STL: is a user defined type -> depends on a user defined type

Common
----
Why CommonType<T,U>& <- why mutable lvalue in the CommonReference?

is_nothrow_swappable
-----
don't use R1 and R2. Use T and U
don't use is_nothrow_swappable_t, it doesn't exist.
don't use short template introducer syntax.
use magic wording about how swap gets found.

basic_common_reference
-----
Note that basic_common_reference_t is intentionally not provided. (STL: doesn't need a standard note probably.)

common_type
-----
is a user-defined type -> depends on a user-defined type

basic_common_reference
-----
"shall be no member typedef type" -> the primary template shall have no member typedef type. if users specialize it, the type may be defined or omitted.

cv qualifiers on the lef
"end example" instead of "exit example"
space before ? in ternary operators
These bullets all need "otherwise"
(3.2) COMMON_RES -> COMMON_REF. LWG is not happy with the wording of (3.2). Maybe introduce a pseudo macro for COMMON_REF(X&,Y&) (don't repeat yourself!)
Don't reuse letters across bullets when they mean something different!


common_type
---
"Let D0 by decay_t<T0>" use D0 and D1 instead of X and Y.
(4.4) T1,T2 and R -> T0,T1 and Rest

common_reference
---
Same edits as above.
valid reference type -> well-formed and denotes a reference type
uses basic_common_reference_t but doesn't define it.
"denotes a valid type" -> "is well formed" (globally)


No __lower or _Cap in the standard!(?)

Draft new version and schedule a telecon to review.
